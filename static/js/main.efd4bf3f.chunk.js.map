{"version":3,"sources":["helpers/Helper.tsx","components/bomb/Bomb.tsx","components/flag/Flag.tsx","components/boardTile/BoardTile.tsx","App.tsx","components/boardSettings/BoardSettings.tsx","reportWebVitals.ts","index.tsx"],"names":["palleteColor","Bomb","props","className","Flag","BoardTile","showed","nro","flag","onClick","content","TileStates","SHOWED","EXPLODED","style","color","BoardSettings","lenghX","lenghY","bombsQty","onChange","value","type","parseInt","currentTarget","onReset","createBoard","lengthX","lengthY","bombQty","newBoard","i","row","j","push","zeroBoard","_","colocatedBombs","posX","Math","round","random","posY","App","useState","boardSettings","setBoardSettings","board","setBoard","numberBoard","setNumberBoard","losedGame","setLosedGame","useEffect","lbor","auxBoard","boardCleaner","column","gridTemplateRows","gridTemplateColumns","map","indexR","item","index","FLAG","forEach","r","ir","c","ic","cellShowed","v","alert","isGameDone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efd4bf3f.chunk.js","sourcesContent":["export const palleteColor = [\n  \"red\",\n  \"blue\",\n  \"green\",\n  \"blueviolet\",\n  \"darkcyan\",\n  \"darkmagenta\",\n  \"\",\n  \"black\",\n];\n","import \"./Bomb.css\";\n\ninterface BoardTileProps {}\n\nexport function Bomb(props: BoardTileProps) {\n  return <div className={\"Bomb-wrapper\"} />;\n}\n","import \"./Flag.css\";\n\ninterface FlagTileProps {}\n\nexport function Flag(props: FlagTileProps) {\n  return <div className={\"Flag-wrapper\"} />;\n}\n","import { TileStates } from \"../../App\";\nimport { palleteColor } from \"../../helpers/Helper\";\nimport { Bomb } from \"../bomb/Bomb\";\nimport { Flag } from \"../flag/Flag\";\n\nimport \"./BoardTile.css\";\n\ninterface BoardTileProps {\n  nro: number;\n  showed: number;\n  flag: boolean;\n  onClick: () => void;\n}\n\nexport function BoardTile(props: BoardTileProps) {\n  const { showed, nro, flag, onClick } = props;\n\n  let content: any = <div />;\n\n  if (showed === TileStates.SHOWED || showed === TileStates.EXPLODED) {\n    if (nro === -1) content = <Bomb />;\n    else if (nro !== 0) content = nro;\n  } else if (showed !== TileStates.SHOWED && flag) {\n    content = <Flag />;\n  }\n\n  return (\n    <div\n      className={`BoardTile-wrapper ${\n        showed === TileStates.SHOWED ? \"BoardTile-showed\" : \"\"\n      } ${showed === TileStates.EXPLODED ? \"BoardTile-showed-fail\" : \"\"}`}\n      style={{ color: palleteColor[nro] }}\n      onClick={onClick}\n    >\n      {content}\n    </div>\n  );\n}\n","import * as _ from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { BoardTile } from \"./components/boardTile/BoardTile\";\n\nimport \"./App.css\";\nimport { BoardSettings } from \"./components/boardSettings/BoardSettings\";\n\nexport enum TileStates {\n  HIDDEN = 0,\n  SHOWED = 1,\n  FLAG = 2,\n  IDK = 3,\n  EXPLODED = 5,\n}\n\nfunction createBoard(lengthX: number, lengthY: number, bombQty: number) {\n  //Initialize M*N Board in 0\n  let newBoard = [];\n  for (let i = 0; i < lengthX + 2; i++) {\n    let row = [];\n    for (let j = 0; j < lengthY + 2; j++) {\n      row.push(0);\n    }\n    newBoard.push(row);\n  }\n\n  const zeroBoard = _.cloneDeep(newBoard);\n\n  //Pick Bomb Positions amd place  them\n\n  let colocatedBombs = 0;\n  while (colocatedBombs < bombQty) {\n    const posX = Math.round(Math.random() * (lengthX - 1)) + 1;\n    const posY = Math.round(Math.random() * (lengthY - 1)) + 1;\n\n    if (newBoard[posX][posY] !== -1) {\n      newBoard[posX][posY] = -1;\n\n      newBoard[posX + 1][posY + 1] !== -1 && newBoard[posX + 1][posY + 1]++;\n      newBoard[posX + 1][posY] !== -1 && newBoard[posX + 1][posY]++;\n      newBoard[posX + 1][posY - 1] !== -1 && newBoard[posX + 1][posY - 1]++;\n      newBoard[posX - 1][posY + 1] !== -1 && newBoard[posX - 1][posY + 1]++;\n      newBoard[posX - 1][posY] !== -1 && newBoard[posX - 1][posY]++;\n      newBoard[posX - 1][posY - 1] !== -1 && newBoard[posX - 1][posY - 1]++;\n      newBoard[posX][posY + 1] !== -1 && newBoard[posX][posY + 1]++;\n      newBoard[posX][posY - 1] !== -1 && newBoard[posX][posY - 1]++;\n\n      colocatedBombs++;\n    }\n  }\n\n  return { zeroBoard, newBoard };\n}\n\nfunction App() {\n  const [boardSettings, setBoardSettings] = useState({\n    lenghX: 24,\n    lenghY: 32,\n    bombsQty: 99,\n  });\n\n  const { lenghX, lenghY, bombsQty } = boardSettings;\n\n  const [board, setBoard] = useState([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n  ]);\n\n  const [numberBoard, setNumberBoard] = useState([\n    [0, 0, 1],\n    [0, -1, 1],\n    [1, 1, 1],\n  ]);\n\n  const [losedGame, setLosedGame] = useState(false);\n\n  useEffect(() => {\n    const lbor = createBoard(lenghX, lenghY, bombsQty);\n\n    setNumberBoard(lbor.newBoard);\n    setBoard(lbor.zeroBoard);\n  }, [lenghX, lenghY, bombsQty]);\n\n  const auxBoard = board;\n\n  const boardCleaner = (row: number, column: number) => {\n    if (row + 1 < lenghX + 1 && auxBoard[row + 1][column] === 0) {\n      auxBoard[row + 1][column] = 1;\n      if (numberBoard[row + 1][column] === 0) boardCleaner(row + 1, column);\n    }\n\n    if (row - 1 > 0 && auxBoard[row - 1][column] === 0) {\n      auxBoard[row - 1][column] = 1;\n      if (numberBoard[row - 1][column] === 0) boardCleaner(row - 1, column);\n    }\n\n    if (column + 1 < lenghY + 1 && auxBoard[row][column + 1] === 0) {\n      auxBoard[row][column + 1] = 1;\n      if (numberBoard[row][column + 1] === 0) boardCleaner(row, column + 1);\n    }\n\n    if (column - 1 > 0 && auxBoard[row][column - 1] === 0) {\n      auxBoard[row][column - 1] = 1;\n      if (numberBoard[row][column - 1] === 0) boardCleaner(row, column - 1);\n    }\n\n    //corners\n    if (column - 1 > 0 && row - 1 > 0 && auxBoard[row - 1][column - 1] === 0) {\n      auxBoard[row - 1][column - 1] = 1;\n      if (numberBoard[row - 1][column - 1] === 0)\n        boardCleaner(row - 1, column - 1);\n    }\n\n    if (\n      column - 1 > 0 &&\n      row + 1 < lenghX + 1 &&\n      auxBoard[row + 1][column - 1] === 0\n    ) {\n      auxBoard[row + 1][column - 1] = 1;\n      if (numberBoard[row + 1][column - 1] === 0)\n        boardCleaner(row + 1, column - 1);\n    }\n\n    if (\n      column + 1 < lenghY + 1 &&\n      row + 1 < lenghX + 1 &&\n      auxBoard[row + 1][column + 1] === 0\n    ) {\n      auxBoard[row + 1][column + 1] = 1;\n      if (numberBoard[row + 1][column + 1] === 0)\n        boardCleaner(row + 1, column + 1);\n    }\n\n    if (\n      column + 1 < lenghY + 1 &&\n      row - 1 > 0 &&\n      auxBoard[row - 1][column + 1] === 0\n    ) {\n      auxBoard[row - 1][column + 1] = 1;\n      if (numberBoard[row - 1][column + 1] === 0)\n        boardCleaner(row - 1, column + 1);\n    }\n  };\n\n  const isGameDone = () => {\n    let cellShowed: number = 0;\n\n    board.forEach((v) => {\n      v.forEach((value) => {\n        if (value === 1) cellShowed++;\n      });\n    });\n\n    if (bombsQty === lenghX * lenghY - cellShowed) alert(\"You win!\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">MineSweeper</header>\n      <div className={\"App-options\"}>\n        <BoardSettings\n          lenghX={lenghX}\n          lenghY={lenghY}\n          bombsQty={bombsQty}\n          onReset={() => {\n            const lbor = createBoard(lenghX, lenghY, bombsQty);\n\n            setNumberBoard(lbor.newBoard);\n            setBoard(lbor.zeroBoard);\n            setLosedGame(false);\n          }}\n          onChange={(value: any) => {\n            if (value.lenghX * value.lenghY <= value.bombsQty) return;\n\n            setBoardSettings(value);\n            const lbor = createBoard(\n              value.lenghX,\n              value.lenghY,\n              value.bombsQty\n            );\n\n            setNumberBoard(lbor.newBoard);\n            setBoard(lbor.zeroBoard);\n            setLosedGame(false);\n          }}\n        />\n      </div>\n      <body\n        className=\"App-body\"\n        style={{\n          gridTemplateRows: `repeat(${lenghX}, 25px)`,\n          gridTemplateColumns: `repeat(${lenghY}, 25px)`,\n        }}\n      >\n        {numberBoard.map((row, indexR) => {\n          return row.map((item, index) => {\n            return (\n              indexR !== 0 &&\n              index !== 0 &&\n              indexR !== lenghX + 1 &&\n              index !== lenghY + 1 && (\n                <BoardTile\n                  nro={item}\n                  showed={board[indexR][index]}\n                  flag={board[indexR][index] === TileStates.FLAG}\n                  onClick={() => {\n                    if (losedGame) return;\n\n                    //Click bomb\n                    if (numberBoard[indexR][index] === -1) {\n                      numberBoard.forEach((r, ir) => {\n                        r.forEach((c, ic) => {\n                          if (c === -1) auxBoard[ir][ic] = TileStates.SHOWED;\n                        });\n                      });\n\n                      auxBoard[indexR][index] = TileStates.EXPLODED;\n\n                      setBoard(_.cloneDeep(auxBoard));\n                      setLosedGame(true);\n                      return;\n                    }\n\n                    auxBoard[indexR][index] = TileStates.SHOWED;\n\n                    if (numberBoard[indexR][index] === 0)\n                      boardCleaner(indexR, index);\n\n                    setBoard(_.cloneDeep(auxBoard));\n                    isGameDone();\n                  }}\n                />\n              )\n            );\n          });\n        })}\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","import \"./BoardSettings.css\";\n\nexport function BoardSettings(props: any) {\n  const { lenghX, lenghY, bombsQty, onChange } = props;\n\n  return (\n    <>\n      <div className={\"BoardSettings-wrapper\"}>\n        X:\n        <input\n          value={lenghX}\n          className={\"BoardSettings-input\"}\n          type={\"number\"}\n          onChange={(value) => {\n            onChange({\n              lenghY,\n              bombsQty,\n              lenghX: parseInt(value.currentTarget.value),\n            });\n          }}\n        ></input>\n        Y:\n        <input\n          value={lenghY}\n          className={\"BoardSettings-input\"}\n          type={\"number\"}\n          onChange={(value) => {\n            onChange({\n              lenghX,\n              bombsQty,\n              lenghY: parseInt(value.currentTarget.value),\n            });\n          }}\n        ></input>\n        Bombs:\n        <input\n          value={bombsQty}\n          className={\"BoardSettings-input\"}\n          type={\"number\"}\n          onChange={(value) => {\n            onChange({\n              lenghY,\n              lenghX,\n              bombsQty: parseInt(value.currentTarget.value),\n            });\n          }}\n        ></input>\n      </div>\n      <button className={\"BoardSettings-button\"} onClick={props.onReset}>\n        Reset\n      </button>\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}